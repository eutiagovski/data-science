{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1N1IEhfs33IAlrUysCSVNUtQLZ2X2jpCf",
      "authorship_tag": "ABX9TyMmrvNO8QTpccEyN3EaHmGn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eutiagovski/data-science/blob/main/PRO3-VISAO_COMPUTACIONAL_I\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### OBJETIVOS\n",
        "\n",
        "* Explorar a base de dados cifar10 e treinar um modelo de aprendizado profundo\n",
        "* Utilizar early stopping para otimizar a função custo\n",
        "* Explorar a otimização dos parâmetros"
      ],
      "metadata": {
        "id": "rmLauDXsXSEe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# imports\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import datetime"
      ],
      "metadata": {
        "id": "osy3L08tozhX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# loading data\n",
        "\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()"
      ],
      "metadata": {
        "id": "pbiji74XuJOo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8e9871f-cef9-4d60-c538-2ea37c12a39a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 2s 0us/step\n",
            "170508288/170498071 [==============================] - 2s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model / data parameters\n",
        "input_shape=(32, 32, 3)\n",
        "n_classes = 10\n",
        "\n",
        "def esqueci_as_classes_me_ajuda(pred):\n",
        "  dicionario = {0: \"airplane\",\n",
        "           1: \"automobile\",\n",
        "           2: \"bird\",\n",
        "           3: \"cat\",\n",
        "           4: \"deer\",\n",
        "           5: \"dog\",\n",
        "           6: \"frog\",\n",
        "           7: \"horse\",\n",
        "           8: \"ship\",\n",
        "           9: \"truck\"}\n",
        "  return dicionario[np.argmax(pred)]"
      ],
      "metadata": {
        "id": "QxVsN_yQ682m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# normalizando as entradas para valores entre 1 e 0\n",
        "\n",
        "x_train = x_train.astype(\"float32\") / 255\n",
        "x_test = x_test.astype(\"float32\") / 255\n",
        "\n",
        "print(\"x_train shape:\", x_train.shape)\n",
        "print(x_train.shape[0], \"train samples\")\n",
        "print(x_test.shape[0], \"test samples\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BjV7NIgZ7NtS",
        "outputId": "94426cd0-4dfa-4337-c450-fddd6f2d17ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train shape: (50000, 32, 32, 3)\n",
            "50000 train samples\n",
            "10000 test samples\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# one hot encoding nos y\n",
        "\n",
        "y_train = keras.utils.to_categorical(y_train)\n",
        "y_test = keras.utils.to_categorical(y_test)"
      ],
      "metadata": {
        "id": "qaatOSRHunlu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# definindo o modelo\n",
        "# ESTE MODELO FOI CONSTRUÍDO SEGUNDO AS ORIENTAÇÕES DA DOCUMENTAÇÃO DO KERAS, DISPONÍVEL EM: https://keras.io/examples/vision/mnist_convnet/\n",
        "\n",
        "input_shape=(32, 32, 3)\n",
        "\n",
        "model = keras.Sequential(\n",
        "    [\n",
        "        keras.Input(shape=input_shape),\n",
        "        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n",
        "        layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n",
        "        layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "        layers.Flatten(),\n",
        "        layers.Dropout(0.5),\n",
        "        layers.Dense(10, activation=\"softmax\"),\n",
        "    ]\n",
        ")\n",
        "optimizer = tf.keras.optimizers.SGD(3e-2)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
        "\n",
        "model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZcA7myD6u9LJ",
        "outputId": "00567843-dce5-4ce1-8021-8f8c505ad656"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 30, 30, 32)        896       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 15, 15, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 13, 13, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 6, 6, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 2304)              0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 2304)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 10)                23050     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 42,442\n",
            "Trainable params: 42,442\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# utilizando a GPU como acelerador\n",
        "\n",
        "tf.config.list_physical_devices('GPU')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k5HxlMZk0hBa",
        "outputId": "80e57754-04f1-424d-91a0-863003315e95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# adicinando early stopping\n",
        "\n",
        "stopper = tf.keras.callbacks.EarlyStopping(\n",
        "    monitor=\"val_loss\", patience=10, verbose=2\n",
        ")"
      ],
      "metadata": {
        "id": "ajZCYllrwv-7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train, y_train, epochs=50, validation_split=0.1, callbacks=[stopper])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-MlMLQViEbnl",
        "outputId": "5cb32d0c-40bd-4ca8-af87-734077e4a85f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "1407/1407 [==============================] - 20s 7ms/step - loss: 1.8525 - accuracy: 0.3272 - val_loss: 1.5972 - val_accuracy: 0.4210\n",
            "Epoch 2/50\n",
            "1407/1407 [==============================] - 7s 5ms/step - loss: 1.4618 - accuracy: 0.4819 - val_loss: 1.3305 - val_accuracy: 0.5262\n",
            "Epoch 3/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 1.3203 - accuracy: 0.5350 - val_loss: 1.2315 - val_accuracy: 0.5716\n",
            "Epoch 4/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 1.2279 - accuracy: 0.5712 - val_loss: 1.2025 - val_accuracy: 0.5810\n",
            "Epoch 5/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 1.1678 - accuracy: 0.5897 - val_loss: 1.1117 - val_accuracy: 0.6218\n",
            "Epoch 6/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 1.1193 - accuracy: 0.6094 - val_loss: 1.1718 - val_accuracy: 0.6006\n",
            "Epoch 7/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 1.0834 - accuracy: 0.6220 - val_loss: 1.1647 - val_accuracy: 0.5902\n",
            "Epoch 8/50\n",
            "1407/1407 [==============================] - 7s 5ms/step - loss: 1.0448 - accuracy: 0.6364 - val_loss: 1.0255 - val_accuracy: 0.6568\n",
            "Epoch 9/50\n",
            "1407/1407 [==============================] - 8s 5ms/step - loss: 1.0200 - accuracy: 0.6470 - val_loss: 0.9616 - val_accuracy: 0.6694\n",
            "Epoch 10/50\n",
            "1407/1407 [==============================] - 7s 5ms/step - loss: 1.0012 - accuracy: 0.6525 - val_loss: 1.1217 - val_accuracy: 0.6026\n",
            "Epoch 11/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9825 - accuracy: 0.6582 - val_loss: 0.9168 - val_accuracy: 0.6862\n",
            "Epoch 12/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9616 - accuracy: 0.6678 - val_loss: 0.9927 - val_accuracy: 0.6570\n",
            "Epoch 13/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9490 - accuracy: 0.6706 - val_loss: 0.8917 - val_accuracy: 0.6968\n",
            "Epoch 14/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9358 - accuracy: 0.6788 - val_loss: 0.9635 - val_accuracy: 0.6692\n",
            "Epoch 15/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9289 - accuracy: 0.6797 - val_loss: 0.8794 - val_accuracy: 0.6990\n",
            "Epoch 16/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9125 - accuracy: 0.6829 - val_loss: 0.8575 - val_accuracy: 0.7048\n",
            "Epoch 17/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.9051 - accuracy: 0.6866 - val_loss: 0.8577 - val_accuracy: 0.7046\n",
            "Epoch 18/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8913 - accuracy: 0.6923 - val_loss: 0.8368 - val_accuracy: 0.7162\n",
            "Epoch 19/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8786 - accuracy: 0.6935 - val_loss: 1.0805 - val_accuracy: 0.6278\n",
            "Epoch 20/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8750 - accuracy: 0.6970 - val_loss: 1.2404 - val_accuracy: 0.5812\n",
            "Epoch 21/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8632 - accuracy: 0.6996 - val_loss: 0.8404 - val_accuracy: 0.7234\n",
            "Epoch 22/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8601 - accuracy: 0.7022 - val_loss: 1.0510 - val_accuracy: 0.6294\n",
            "Epoch 23/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8560 - accuracy: 0.7026 - val_loss: 0.9554 - val_accuracy: 0.6762\n",
            "Epoch 24/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8457 - accuracy: 0.7062 - val_loss: 0.8001 - val_accuracy: 0.7226\n",
            "Epoch 25/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8402 - accuracy: 0.7094 - val_loss: 0.8383 - val_accuracy: 0.7148\n",
            "Epoch 26/50\n",
            "1407/1407 [==============================] - 7s 5ms/step - loss: 0.8342 - accuracy: 0.7107 - val_loss: 0.8478 - val_accuracy: 0.7122\n",
            "Epoch 27/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8256 - accuracy: 0.7122 - val_loss: 1.0007 - val_accuracy: 0.6524\n",
            "Epoch 28/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8214 - accuracy: 0.7130 - val_loss: 0.7974 - val_accuracy: 0.7264\n",
            "Epoch 29/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8099 - accuracy: 0.7176 - val_loss: 0.8381 - val_accuracy: 0.7154\n",
            "Epoch 30/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8065 - accuracy: 0.7215 - val_loss: 0.8261 - val_accuracy: 0.7106\n",
            "Epoch 31/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.8047 - accuracy: 0.7212 - val_loss: 0.7908 - val_accuracy: 0.7304\n",
            "Epoch 32/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7989 - accuracy: 0.7221 - val_loss: 0.9045 - val_accuracy: 0.6894\n",
            "Epoch 33/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7937 - accuracy: 0.7250 - val_loss: 0.7798 - val_accuracy: 0.7324\n",
            "Epoch 34/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7934 - accuracy: 0.7251 - val_loss: 0.8438 - val_accuracy: 0.7086\n",
            "Epoch 35/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7805 - accuracy: 0.7323 - val_loss: 0.8764 - val_accuracy: 0.7020\n",
            "Epoch 36/50\n",
            "1407/1407 [==============================] - 5s 4ms/step - loss: 0.7826 - accuracy: 0.7281 - val_loss: 0.7912 - val_accuracy: 0.7312\n",
            "Epoch 37/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7796 - accuracy: 0.7297 - val_loss: 0.8572 - val_accuracy: 0.7052\n",
            "Epoch 38/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7751 - accuracy: 0.7308 - val_loss: 0.8060 - val_accuracy: 0.7288\n",
            "Epoch 39/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7705 - accuracy: 0.7320 - val_loss: 0.7870 - val_accuracy: 0.7350\n",
            "Epoch 40/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7633 - accuracy: 0.7343 - val_loss: 0.7586 - val_accuracy: 0.7434\n",
            "Epoch 41/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7621 - accuracy: 0.7338 - val_loss: 0.7644 - val_accuracy: 0.7374\n",
            "Epoch 42/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7619 - accuracy: 0.7341 - val_loss: 0.8604 - val_accuracy: 0.7046\n",
            "Epoch 43/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7583 - accuracy: 0.7358 - val_loss: 0.7455 - val_accuracy: 0.7448\n",
            "Epoch 44/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7541 - accuracy: 0.7365 - val_loss: 0.7860 - val_accuracy: 0.7280\n",
            "Epoch 45/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7471 - accuracy: 0.7408 - val_loss: 0.7833 - val_accuracy: 0.7262\n",
            "Epoch 46/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7426 - accuracy: 0.7396 - val_loss: 0.8367 - val_accuracy: 0.7162\n",
            "Epoch 47/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7468 - accuracy: 0.7395 - val_loss: 0.7575 - val_accuracy: 0.7424\n",
            "Epoch 48/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7391 - accuracy: 0.7418 - val_loss: 0.7511 - val_accuracy: 0.7486\n",
            "Epoch 49/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7378 - accuracy: 0.7439 - val_loss: 0.7659 - val_accuracy: 0.7396\n",
            "Epoch 50/50\n",
            "1407/1407 [==============================] - 6s 4ms/step - loss: 0.7348 - accuracy: 0.7423 - val_loss: 0.7559 - val_accuracy: 0.7410\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f13c041ae50>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score = model.evaluate(x_test, y_test, verbose=0)\n",
        "print(\"Test loss:\", score[0])\n",
        "print(\"Test accuracy:\", score[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_iDovh3K_BFV",
        "outputId": "b5621407-d8bd-4f41-c875-824e3457ac7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test loss: 0.7783182859420776\n",
            "Test accuracy: 0.7287999987602234\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('/content/drive/MyDrive/Mentorama/modelos_treinados/cifar10/model_{}'.format(score[1]))"
      ],
      "metadata": {
        "id": "KlOGQL8kZ6rn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "i = np.random.randint(0, len(x_test))\n",
        "pred = model.predict(tf.expand_dims(x_test[i], 0))\n",
        "plt.imshow(x_test[i])\n",
        "print(esqueci_as_classes_me_ajuda(pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "Su0gml2Qxo79",
        "outputId": "d5f4451c-3ee7-41b1-8611-c94c1bc9d650"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dog\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### CONCLUSÕES\n",
        "\n",
        "* A aceleração por GPU diminiu significativamente o tempo de treinamento do modelo.\n",
        "* O early stop funcinou perfeitamente para o treinamento quando não houve mais evolução na funçao perda.\n",
        "* O modelo atingiu uma precisão de >70%."
      ],
      "metadata": {
        "id": "cyHkydx0DGxv"
      }
    }
  ]
}